<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player_idle</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Initialisation

// init instance variables

x_vel = 0;  // current x velocity
y_vel = 0;  // current y velocity

max_x_vel = 10; // maximum x velocity

grav = 1;
terminal_vel = 20;
jump_vel = -20;
jump_release_vel = -6;

on_ground = false;  // are we on the ground?


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update player position

var left_pressed = keyboard_check(vk_left);
var right_pressed = keyboard_check(vk_right);
var jump_pressed = keyboard_check(vk_space);
var jump_released = keyboard_check_released(vk_space);

// directional controls
if(left_pressed)
{
    if(x_vel &gt; -max_x_vel)
        x_vel -= 1;
}
else if(right_pressed)
{
    if(x_vel &lt; max_x_vel)
        x_vel += 1;
}
else
{
    if(x_vel !=0)
        x_vel -= sign(x_vel);
}

// gravity
y_vel += grav;
if(y_vel &gt; terminal_vel)    // clamp to terminal velocity
    y_vel = terminal_vel;
    
// jump
if(jump_pressed &amp;&amp; on_ground)
{
    y_vel = jump_vel;
    on_ground = false;
}

// jump release
if(jump_released &amp;&amp; !on_ground &amp;&amp; y_vel &lt; jump_release_vel) // if we are jumping up above the jump release velocity
{
    y_vel = jump_release_vel;
}

// flip sprite
if(x_vel != 0)
{
    if(image_xscale != sign(x_vel))
    {
        image_xscale = sign(x_vel);
        
        while(place_meeting(x,y,obj_solid)) // sprite might get stuck in wall after flip - nudge it out
            x+=sign(x_vel);
    }
}

// Apply velocity
// --------------

// Apply Horizontal Velocity
if(place_meeting(x+x_vel,y,obj_solid))  // step will produce collision
{
    while(!place_meeting(x+sign(x_vel),y,obj_solid))
        x+=sign(x_vel);
        
    x_vel = 0;
}
else
{
    x+=x_vel;
}

// Apply Vertical Velocity
if(place_meeting(x,y+y_vel,obj_solid))  // step will produce collision
{
    while(!place_meeting(x,y+sign(y_vel),obj_solid))
        y+=sign(y_vel);

    // have we landed?
    if(y_vel &gt; 0 &amp;&amp; on_ground == false)
    {
        y_vel = 0;
        on_ground = true;
    }
    
    y_vel = 0;
}
else
{
    y+=y_vel;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
